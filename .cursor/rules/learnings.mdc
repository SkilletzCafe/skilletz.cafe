---
description: Project learnings and best practices
globs: ["*"]
alwaysApply: true
---
# Project Learnings

## Purpose
- Document discoveries and insights about the codebase
- Build up knowledge base for AI assistance
- Prevent repeated mistakes
- Capture successful patterns

## Recent Learnings

### Rules File Management
Category: Code Organization
Date: 2024-03-09
Context:
- Needed to edit Cursor rules files
- Direct editing of .mdc files was not possible
- Required a workflow for managing editable copies

Learning:
- Keep source files as `.mdc` in version control
- Create `.mdc.draft` working copies for editing
- Use make targets to manage the workflow:
  - `make init-rules`: Create working copies
  - `make save-rules`: Save changes back to source

Example:
```bash
# Edit workflow
make init-rules    # Create .mdc.txt files
# Edit .mdc.draft files
make save-rules    # Save changes back to .mdc files
```

Tags: #workflow #tooling #documentation

### Mobile Layout Issues
Category: Mobile Development
Date: 2024-03-09
Context:
- Menu items were wider than screen on mobile
- Images weren't scaling properly
- Missing images needed placeholders

Learning:
- Always use max-width: 100vw for containers
- Use padding-bottom technique for responsive images
- Implement CSS-based placeholders instead of placeholder images

Example:
```css
/* Responsive container */
.container {
  width: 100%;
  max-width: 100vw;
  box-sizing: border-box;
}

/* Responsive image placeholder */
.imagePlaceholder {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 56.25%;
  background: #1a1a1a;
}
```

Tags: #mobile #responsive #images

### Component Reuse
Category: Code Organization
Date: 2024-03-09
Context:
- Similar components were being reused across different contexts
- Led to tight coupling and maintenance issues

Learning:
- Create separate components even if they look similar
- Name components based on their semantic purpose
- Avoid sharing styles between unrelated components

Example:
```tsx
// Don't do this:
<ImageContainer>  // Generic component used everywhere

// Do this instead:
<MenuItemImage>   // Specific to menu items
<ProfileImage>    // Specific to profiles
<BlogImage>       // Specific to blog posts
```

Tags: #components #organization #patterns

## Categories
- Architecture
- Code Organization
- Mobile Development
- Performance
- Testing
- Security
- UI/UX
- Accessibility

## Integration
- Reference specific files and patterns
- Include code examples
- Tag entries for better context matching
- Update after resolving issues or discovering patterns