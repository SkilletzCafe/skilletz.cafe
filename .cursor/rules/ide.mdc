---
description: IDE and project configuration settings
globs: ["*"]
alwaysApply: true
---
# IDE and Project Configuration

## Overview
This document serves as the single source of truth for all IDE and project configuration settings. It documents the purpose and contents of each configuration file to prevent accidental duplication or inconsistencies.

## Core Configuration Files

### EditorConfig (.editorconfig)
Purpose: Maintain consistent coding styles across different editors and IDEs
```ini
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 2
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.{js,jsx,ts,tsx,css,md,json}]
quote_type = single
```

### Prettier (.prettierrc)
Purpose: Code formatting rules
```json
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "printWidth": 100,
  "trailingComma": "es5",
  "plugins": ["@trivago/prettier-plugin-sort-imports"],
  "importOrder": [
    "^react$",
    "^next(.*)$",
    "<THIRD_PARTY_MODULES>",
    "^@/config/(.*)$",
    "^@/context/(.*)$",
    "^@/components/(.*)$",
    "^@/utils/(.*)$",
    "^@/styles/(.*)$",
    "^[./]"
  ],
  "importOrderSeparation": true,
  "importOrderSortSpecifiers": true
}
```

### ESLint (.eslintrc)
Purpose: Code linting and style enforcement
```json
{
  "extends": "next/core-web-vitals"
}
```

### TypeScript (tsconfig.json)
Purpose: TypeScript compiler configuration
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

### Next.js (next.config.mjs)
Purpose: Next.js framework configuration
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  images: {
    unoptimized: true
  }
};

export default nextConfig;
```

## IDE-Specific Settings

### VS Code (.vscode/)
Purpose: VS Code workspace settings and extensions
- `settings.json`: Editor settings
- `extensions.json`: Recommended extensions
- `launch.json`: Debug configurations

### VS Code Workspace (skilletz.cafe.code-workspace)
Purpose: VS Code workspace configuration
```json
{
  "folders": [
    {
      "path": "."
    }
  ],
  "settings": {}
}
```

## Git Configuration

### Git Ignore (.gitignore)
Purpose: Specify files and directories to ignore in version control
- Node modules
- Build outputs
- Environment files
- IDE-specific files
- OS-specific files

### Husky (.husky/)
Purpose: Git hooks for pre-commit and other Git operations
- Pre-commit hooks for linting and formatting
- Commit message validation

## Package Management

### Package.json
Purpose: Node.js project configuration and dependencies
- Project metadata
- Scripts
- Dependencies
- Dev dependencies

### Package-lock.json
Purpose: Lock file for deterministic dependency installation
- Exact versions of all dependencies
- Dependency tree

## Best Practices
1. Always update this document when adding or modifying configuration files
2. Keep configuration files minimal and focused
3. Use comments to explain non-obvious settings
4. Document any special considerations or workarounds
5. Test configuration changes across all supported IDEs and environments

## Recent Learnings

### Configuration File Organization
Category: IDE Configuration
Date: 2024-03-10
Context:
- Multiple configuration files were scattered across the project
- No single source of truth for IDE and project settings
- Risk of inconsistent or duplicate configurations

Learning:
- Create a centralized documentation for all configuration files
- Document the purpose and contents of each file
- Include examples and best practices
- Keep configuration files minimal and focused
- Test changes across all supported environments

Tags: #ide #configuration #documentation #best-practices
